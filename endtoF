import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.net.URI;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;
import java.net.URI;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

import java.io.FileReader;
import java.net.URI;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.FileWriter;
import java.io.IOException;
public class RallyJsonObj {

  

	public static void main(String[] args) throws IOException {
        String testCaseId = "CC2-T6096";
        String jiraBaseUri = "https://jira.healthcareit.net/";
        String authToken = "NjYwNzM3MzEyMzczOqpitrVg77VQlPFPBwSZ+cMq37S5";

        // Send the GET request to JIRA using HttpClient
        HttpClient client = HttpClients.createDefault();
        HttpGet request = new HttpGet(jiraBaseUri + "/rest/atm/1.0/testcase/" + testCaseId);
        request.setHeader("Authorization", "Bearer " + authToken);
        request.setHeader("Accept", "application/json");

        HttpResponse response = client.execute(request);
        String responseBody = EntityUtils.toString(response.getEntity());

        System.out.println("Pretty Response: " + responseBody);

        // Parse the JIRA response
        JsonObject jiraJson = JsonParser.parseString(responseBody).getAsJsonObject();

        // Create the Rally JSON object
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", "17893258189911");

        JsonObject testCase = new JsonObject();
        testCase.addProperty("Name", jiraJson.get("name").getAsString());
        testCase.addProperty("Method", "Manual"); // Assuming a default value

        String priority = jiraJson.get("priority").getAsString();
        if (priority.equalsIgnoreCase("Normal")) {
            testCase.addProperty("Priority", "Useful");
        } else {
            testCase.addProperty("Priority", priority);
        }

        testCase.addProperty("Owner", "/user/775698509283"); // Assuming a default value
        testCase.addProperty("Ready", jiraJson.get("status").getAsString().equals("Ready"));

        // Add Tags
        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        // Add TestFolder
        JsonObject testFolder = new JsonObject();
        testFolder.addProperty("_ref", "/testfolder/790320784037");
        rallyJson.add("TestFolder", testFolder);

        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);
        
        
        // use rallyJson as a JsonObject variable
        JsonObject rallyJsonObject = rallyJson;

        // Save the transformed JSON to a variable
     String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        // Print the transformed JSON string
        System.out.println("Transformed JSON: " + rallyJsonString);

      
        
        
        
        
        
        
        
        
        
        
        
        
        // Now you can use the rallyJsonString in a different class as needed
        
    	RallyJsonObj rallyJsonObj=new RallyJsonObj();

        
        JsonObject jsonData = JsonParser.parseString(RallyJsonObj.rallyJsonString).getAsJsonObject();

        
        String rallyURL = "https://rally1.rallydev.com";
        String apiKey = "_UWk01XQOyRPk2ctMLiR9PAM1nBE6spnDEmSj1pk";  // replace with your API Key
        String projectRef = "789325818991";  // replace with your project reference
        
        // Initialize Rally API
        RallyRestApi restApi = new RallyRestApi(new URI(rallyURL), apiKey);
        restApi.setApplicationName("CreateTestCaseApp");

        // Extract values from JSON:
        // 1-testcase data
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        
        // 2-TestFolder data
        JsonObject testFolderData = null;
        JsonElement testFolderElement = jsonData.get("TestFolder");
        if (testFolderElement != null && testFolderElement.isJsonObject()) {
            testFolderData = testFolderElement.getAsJsonObject();
        } else {
            System.out.println("Error: TestFolder data not found in JSON.");
            restApi.close();
            return;
        }

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", projectRef);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            // Add Tags to the test case from the JSON file
            JsonArray tagsArray = testCaseData.getAsJsonArray("Tags");
            if (tagsArray != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArray) {
                    JsonObject tagObject = tagElement.getAsJsonObject();
                    String tagRef = tagObject.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            // Add TestFolder to the test case from the JSON file
            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                System.out.println("Successfully created test case: " + createResponse.getObject().get("_ref").getAsString());
            } else {
                System.out.println("Error occurred creating test case:");
                for (String error : createResponse.getErrors()) {
                    System.out.println(error);
                }
            }
        } finally {
            // Release resources
            restApi.close();
        }
    }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
