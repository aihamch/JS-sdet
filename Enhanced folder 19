import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

public class NoDuplicate {

    public static void main(String[] args) throws Exception {
        String testCaseId = "CC2-T6096";
        String jiraBaseUri = "https://jira.healthcareit.net/";
        String authToken = "NjYwNzM3MzEyMzczOqpitrVg77VQlPFPBwSZ+cMq37S5";
        String projectRef = "789325818991";

        // Send the GET request to JIRA using HttpClient
        // (Code for retrieving JIRA test case JSON skipped for brevity)

        // Parse the JIRA response and create rallyJson and testCase objects
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", projectRef);

        // (Code for creating testCase object skipped for brevity)

        // Get folder hierarchy from JIRA response
        String folderPath = ""; // Replace with actual folder path from JIRA response
        String[] folderHierarchy = folderPath.split("/");

        // Validate the folder hierarchy against Rally
        if (validateFolderHierarchy(folderHierarchy, projectRef)) {
            // Create TestFolder based on folder hierarchy
            JsonObject testFolder = createTestFolder(folderHierarchy, projectRef);

            if (testFolder == null) {
                System.out.println("Failed to create or retrieve TestFolder.");
                return; // Exit the method or handle accordingly
            }

            // Add TestFolder to the rallyJson
            rallyJson.add("TestFolder", testFolder);

            // Add the testCase object to the rallyJson
            // (Code for creating and adding testCase object skipped for brevity)

            // Save the transformed JSON to a variable (skipped for brevity)

            // Initialize Rally API and create test case (skipped for brevity)
        } else {
            System.out.println("Folder hierarchy mismatch.");
        }
    }

    private static JsonObject createTestFolder(String[] folderHierarchy, String projectRef) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI("https://rally1.rallydev.com"), "_UWk01XQOyRPk2ctMLiR9PAM1nBE6spnDEmSj1pk");
            restApi.setApplicationName("CreateTestCaseApp");

            for (String folderName : folderHierarchy) {
                // Validate folder name
                if (folderName == null || folderName.trim().isEmpty()) {
                    System.out.println("Invalid folder name encountered: '" + folderName + "'");
                    continue; // Skip invalid folder names
                }

                // Query Rally to check if folder already exists
                QueryRequest folderExistenceRequest = new QueryRequest("testfolder");
                folderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()));
                folderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent")); // Set fields to fetch

                QueryResponse queryResponse = restApi.query(folderExistenceRequest);

                if (queryResponse.wasSuccessful()) {
                    if (queryResponse.getTotalResultCount() > 0) {
                        // Folder exists, retrieve its _ref
                        lastFolder = queryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        System.out.println("Folder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist, create new folder
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);

                        if (lastFolderRef != null) {
                            newFolder.addProperty("Parent", lastFolderRef);
                        }

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            System.out.println("Successfully created folder: " + lastFolderRef);
                        } else {
                            System.out.println("Error occurred creating folder:");
                            for (String error : createFolderResponse.getErrors()) {
                                System.out.println(error);
                            }
                            break;
                        }
                    }
                } else {
                    System.out.println("Error querying folders:");
                    for (String error : queryResponse.getErrors()) {
                        System.out.println(error);
                    }
                    break;
                }
            }

            // Return the last created or retrieved folder
            return lastFolder;

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    private static boolean validateFolderHierarchy(String[] folderHierarchy, String projectRef) {
        try (RallyRestApi restApi = new RallyRestApi(new URI("https://rally1.rallydev.com"), "_UWk01XQOyRPk2ctMLiR9PAM1nBE6spnDEmSj1pk")) {
            restApi.setApplicationName("CreateTestCaseApp");

            JsonObject lastFolder = null;
            for (String folderName : folderHierarchy) {
                // Query Rally to check if folder exists
                QueryRequest folderExistenceRequest = new QueryRequest("testfolder");
                folderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()));
                folderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                if (lastFolder != null) {
                    String lastFolderRef = lastFolder.get("_ref").getAsString();
                    folderExistenceRequest.setQueryFilter(new QueryFilter("Parent", "=", lastFolderRef));
                }

                QueryResponse queryResponse = restApi.query(folderExistenceRequest);

                if (queryResponse.wasSuccessful() && queryResponse.getTotalResultCount() > 0) {
                    // Folder exists, retrieve its _ref
                    lastFolder = queryResponse.getResults().get(0).getAsJsonObject();
                } else {
                    // Folder does not exist
                    return false;
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
}
