
2024-08-22 10:42:50.289 [main] ERROR com.optum.coe.automation.rally.RallyOperation - Failed to create test step in Rally: Validation error: TestCase.input length is greater than the maximum length of 2048, Validation error: TestCase.expectedResult length is greater than the maximum length of 2048
2024-08-22 10:42:50.289 [main] WARN  com.optum.coe.automation.rally.RallyOperation - Input field length exceeds 2048 characters. Truncating to fit the allowed limit.

// Modified migrateTestStepsWithAttachments method
    public void migrateTestStepsWithAttachments(String rallyTestCaseOID, List<JiraTestStep> jiraTestSteps, RallyRestApi rallyApi, Map<Integer, List<String>> embeddedAttachmentsMap) {
        Set<String> processedAttachments = new HashSet<>();

        for (JiraTestStep jiraTestStep : jiraTestSteps) {
            try {
                JsonObject newTestStep = new JsonObject();
                newTestStep.addProperty("TestCase", rallyTestCaseOID);
                newTestStep.addProperty("StepIndex", jiraTestStep.getIndex() + 1);  // Adjust the index to start from 1

                // Combine "Step" and "Test Data" fields into the "Input" field in Rally
                String inputField = cleanText((jiraTestStep.getStep() != null ? jiraTestStep.getStep() : "") +
                                              (jiraTestStep.getTestData() != null ? "\n" + jiraTestStep.getTestData() : ""));
                if (inputField.length() > 2048) {
                    logger.warn("Input field length exceeds 2048 characters. Truncating to fit the allowed limit.");
                    inputField = inputField.substring(0, 2048);
                }
                newTestStep.addProperty("Input", inputField);

                // Map "Expected Result" field from Jira directly to Rally's "Expected Result" after cleaning the text
                String expectedResultField = cleanText(jiraTestStep.getExpectedResult());
                if (expectedResultField != null && expectedResultField.length() > 2048) {
                    logger.warn("Expected Result field length exceeds 2048 characters. Truncating to fit the allowed limit.");
                    expectedResultField = expectedResultField.substring(0, 2048);
                }
                newTestStep.addProperty("ExpectedResult", expectedResultField != null ? expectedResultField : "");

                // Handle embedded attachments specific to this test step
                List<String> stepEmbeddedAttachments = embeddedAttachmentsMap.get(jiraTestStep.getIndex());
                if (stepEmbeddedAttachments != null && !stepEmbeddedAttachments.isEmpty()) {
                    for (String embeddedPath : stepEmbeddedAttachments) {
                        if (!processedAttachments.contains(embeddedPath)) {
                            // Extract the filename from the full path
                            String filename = embeddedPath.substring(embeddedPath.lastIndexOf("\\") + 1);
                            String[] attachmentParts = filename.split("_");

                            if (attachmentParts.length > 0) {
                                try {
                                    // Extract the step number from the first part of the filename
                                    int attachmentStepNumber = Integer.parseInt(attachmentParts[0]);

                                    // Check if this attachment corresponds to the current step
                                    if (attachmentStepNumber == jiraTestStep.getIndex() + 1) {  // Ensure the matching is correct
                                        String attachmentURL = attachFileToRallyTestCase(rallyApi, rallyTestCaseOID, embeddedPath);
                                        String attachmentOID = extractOID(attachmentURL);
                                        if (attachmentOID != null) {
                                            // Determine whether the attachment belongs to Input or ExpectedResult
                                            if (filename.contains("testData") || filename.contains("description")) {
                                                newTestStep.addProperty("Input", newTestStep.get("Input").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                                                logger.info("Attachment added to Input field for Test Step " + (jiraTestStep.getIndex() + 1) + ": " + embeddedPath);
                                            } else if (filename.contains("expectedResult")) {
                                                newTestStep.addProperty("ExpectedResult", newTestStep.get("ExpectedResult").getAsString() + " <img src='https://rally1.rallydev.com/slm/attachment/" + attachmentOID + "/content'/>");
                                                logger.info("Attachment added to Expected Result field for Test Step " + (jiraTestStep.getIndex() + 1) + ": " + embeddedPath);
                                            } else {
                                                logger.warn("Attachment name does not contain a recognized field identifier (testData, description, expectedResult): " + embeddedPath);
                                            }
                                        }
                                        processedAttachments.add(embeddedPath);  // Mark this attachment as processed
                                    }
                                } catch (NumberFormatException e) {
                                    logger.error("Failed to parse step number from attachment name: " + filename, e);
                                }
                            }
                        }
                    }
                }

                CreateRequest createRequest = new CreateRequest("TestcaseStep", newTestStep);
                CreateResponse createResponse = rallyApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    String testStepURL = createResponse.getObject().get("_ref").getAsString();
                    String testStepOID = extractOID(testStepURL);
                    logger.info("Successfully created test step in Rally with OID: " + testStepOID + " for TestCase: " + rallyTestCaseOID);
                } else {
                    String[] errors = createResponse.getErrors();
                    logger.error("Failed to create test step in Rally: " + String.join(", ", errors));
                }
            } catch (IOException e) {
                logger.error("Exception occurred while creating test step in Rally", e);
            }
        }
    }
