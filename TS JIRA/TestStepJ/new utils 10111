import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.request.UpdateRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.response.UpdateResponse;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Utils {

    // Logger Initialization for Utils Class
    private static final Logger logger = LogManager.getLogger();

    /* Create a method to establish a Jira connection. This method has two String arguments as "url" and "apiKey"
     * ClosableHttpClient class is used to perform this operation instead of HttpClient, so that a separate method is not required to close the connection each time.
     * This method returns CloseableHttpClient's object instance once the connection is established */
    public static HttpEntity getJiraResponse(String url, String apiKey) {
        CloseableHttpClient connection = HttpClients.createDefault();
        HttpGet request = new HttpGet(url);
        request.setHeader("Authorization", "Bearer " + apiKey);
        request.setHeader("Accept", "application/json");
        HttpResponse response = null;
        try {
            response = connection.execute(request);
        } catch (ClientProtocolException e) {
            logger.error("Error occurred in Jira connection", e);
        } catch (IOException e) {
            logger.error("Error occurred in Jira connection", e);
        }
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            logger.info("Successfully returned HttpEntity response");
            return entity;
        } else {
            logger.error("Error occurred. HttpEntity is null and no response is received.");
            return null;
        }
    }

    /* Create a method to find or create a tag in Rally. This method checks if a tag already exists and creates it if not. */
    public static JsonObject findOrCreateTag(RallyRestApi restApi, String tagName) throws IOException {
        // Check if the tag already exists
        QueryRequest tagRequest = new QueryRequest("Tag");
        tagRequest.setQueryFilter(new QueryFilter("Name", "=", tagName));
        QueryResponse tagResponse = restApi.query(tagRequest);

        if (tagResponse.getResults().size() > 0) {
            return tagResponse.getResults().get(0).getAsJsonObject();
        }

        // If the tag doesn't exist, create it
        JsonObject newTag = new JsonObject();
        newTag.addProperty("Name", tagName);

        CreateRequest createTagRequest = new CreateRequest("Tag", newTag);
        CreateResponse createTagResponse = restApi.create(createTagRequest);

        if (createTagResponse.wasSuccessful()) {
            return createTagResponse.getObject();
        } else {
            logger.error("Error occurred creating tag:");
            for (String error : createTagResponse.getErrors()) {
                logger.error(error);
            }
            return null;
        }
    }

    /* Check if the Jira folder structure is available in Rally
     * a. If folder structure is not available in Rally, then create the same Jira folder structure in Rally for the testcase 
     * b. If folder structure is available in Rally, no action is required */
    public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseUrl, String rallyApiKey) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseUrl), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (int i = 0; i < folderHierarchy.length; i++) {
                String folderName = folderHierarchy[i];
                if (folderName == null || folderName.trim().isEmpty()) {
                    logger.info("Invalid folder name encountered: '" + folderName + "'");
                    continue;
                }

                // If it's the top-level folder, ensure it is created as a parent folder
                if (i == 0) {
                    // Check if the folder exists as a parent folder
                    QueryRequest parentFolderExistenceRequest = new QueryRequest("testfolder");
                    parentFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", "null")));
                    parentFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse parentQueryResponse = restApi.query(parentFolderExistenceRequest);

                    if (parentQueryResponse.wasSuccessful() && parentQueryResponse.getTotalResultCount() > 0) {
                        // Folder exists as a parent folder
                        lastFolder = parentQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Parent folder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist as a parent folder, create it
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created parent folder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating parent folder.");
                            for (String error : createFolderResponse.getErrors()) {
                                logger.error(error);
                            }
                            break;
                        }
                    }
                } else {
                    // For subfolders, check and create under the last folder
                    QueryRequest subFolderExistenceRequest = new QueryRequest("testfolder");
                    subFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", lastFolderRef)));
                    subFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse subQueryResponse = restApi.query(subFolderExistenceRequest);

                    if (subQueryResponse.wasSuccessful() && subQueryResponse.getTotalResultCount() > 0) {
                        // Folder exists as a subfolder
                        lastFolder = subQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Subfolder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist, create it as a subfolder
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);
                        newFolder.addProperty("Parent", lastFolderRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created subfolder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating subfolder");
                            for (String error : createFolderResponse.getErrors()) {
                                logger.error(error);
                            }
                            break;
                        }
                    }
                }
            }

            return lastFolder;

        } catch (Exception e) {
            logger.error("Exception occurred while creating test folder", e);
            return null;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    logger.error("Exception occurred while closing RallyRestApi", e);
                }
            }
        }
    }

    /* Method to add attachment to a test step in Rally */
    public static void addAttachmentToTestStep(RallyRestApi restApi, JsonObject testStepJson, String testStepRef, String attachmentLocation, String jiraApiKey) {
        // Get attachments from the test step JSON
        JsonArray attachmentsArray = testStepJson.getAsJsonArray("attachments");
        if (attachmentsArray
same for setcontent and setfile name and .request in not applicalble fo the arguments createrequest
ChatGPT
It looks like you're running into issues because the CreateRequest class from the Rally REST API does not directly support methods for setting content and file names for attachments. Instead, you typically need to handle file uploads in a different way.

Here's how to adjust the addAttachmentToTestStep method to properly handle file attachments, assuming you need to create and attach files to test steps.

Adjusted addAttachmentToTestStep Method
Instead of using CreateRequest for attachments, you might need to use a multipart request to upload files. Below is a modified version of the addAttachmentToTestStep method which demonstrates how to upload attachments.

Updated Utils Class
java
Copy code
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.request.UpdateRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.response.UpdateResponse;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Utils {

    // Logger Initialization for Utils Class
    private static final Logger logger = LogManager.getLogger();

    /* Create a method to establish a Jira connection. This method has two String arguments as "url" and "apiKey"
     * ClosableHttpClient class is used to perform this operation instead of HttpClient, so that a separate method is not required to close the connection each time.
     * This method returns CloseableHttpClient's object instance once the connection is established */
    public static HttpEntity getJiraResponse(String url, String apiKey) {
        CloseableHttpClient connection = HttpClients.createDefault();
        HttpGet request = new HttpGet(url);
        request.setHeader("Authorization", "Bearer " + apiKey);
        request.setHeader("Accept", "application/json");
        HttpResponse response = null;
        try {
            response = connection.execute(request);
        } catch (ClientProtocolException e) {
            logger.error("Error occurred in Jira connection", e);
        } catch (IOException e) {
            logger.error("Error occurred in Jira connection", e);
        }
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            logger.info("Successfully returned HttpEntity response");
            return entity;
        } else {
            logger.error("Error occurred. HttpEntity is null and no response is received.");
            return null;
        }
    }

    /* Create a method to find or create a tag in Rally. This method checks if a tag already exists and creates it if not. */
    public static JsonObject findOrCreateTag(RallyRestApi restApi, String tagName) throws IOException {
        // Check if the tag already exists
        QueryRequest tagRequest = new QueryRequest("Tag");
        tagRequest.setQueryFilter(new QueryFilter("Name", "=", tagName));
        QueryResponse tagResponse = restApi.query(tagRequest);

        if (tagResponse.getResults().size() > 0) {
            return tagResponse.getResults().get(0).getAsJsonObject();
        }

        // If the tag doesn't exist, create it
        JsonObject newTag = new JsonObject();
        newTag.addProperty("Name", tagName);

        CreateRequest createTagRequest = new CreateRequest("Tag", newTag);
        CreateResponse createTagResponse = restApi.create(createTagRequest);

        if (createTagResponse.wasSuccessful()) {
            return createTagResponse.getObject();
        } else {
            logger.error("Error occurred creating tag:");
            for (String error : createTagResponse.getErrors()) {
                logger.error(error);
            }
            return null;
        }
    }

    /* Check if the Jira folder structure is available in Rally
     * a. If folder structure is not available in Rally, then create the same Jira folder structure in Rally for the testcase 
     * b. If folder structure is available in Rally, no action is required */
    public static JsonObject createTestFolder(String[] folderHierarchy, String projectRef, String rallyBaseUrl, String rallyApiKey) {
        JsonObject lastFolder = null;
        String lastFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseUrl), rallyApiKey);
            restApi.setApplicationName("CreateTestCaseApp");

            for (int i = 0; i < folderHierarchy.length; i++) {
                String folderName = folderHierarchy[i];
                if (folderName == null || folderName.trim().isEmpty()) {
                    logger.info("Invalid folder name encountered: '" + folderName + "'");
                    continue;
                }

                // If it's the top-level folder, ensure it is created as a parent folder
                if (i == 0) {
                    // Check if the folder exists as a parent folder
                    QueryRequest parentFolderExistenceRequest = new QueryRequest("testfolder");
                    parentFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", "null")));
                    parentFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse parentQueryResponse = restApi.query(parentFolderExistenceRequest);

                    if (parentQueryResponse.wasSuccessful() && parentQueryResponse.getTotalResultCount() > 0) {
                        // Folder exists as a parent folder
                        lastFolder = parentQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Parent folder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist as a parent folder, create it
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created parent folder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating parent folder.");
                            for (String error : createFolderResponse.getErrors()) {
                                logger.error(error);
                            }
                            break;
                        }
                    }
                } else {
                    // For subfolders, check and create under the last folder
                    QueryRequest subFolderExistenceRequest = new QueryRequest("testfolder");
                    subFolderExistenceRequest.setQueryFilter(new QueryFilter("Name", "=", folderName.trim()).and(new QueryFilter("Parent", "=", lastFolderRef)));
                    subFolderExistenceRequest.setFetch(new Fetch("_ref", "Name", "Parent"));

                    QueryResponse subQueryResponse = restApi.query(subFolderExistenceRequest);

                    if (subQueryResponse.wasSuccessful() && subQueryResponse.getTotalResultCount() > 0) {
                        // Folder exists as a subfolder
                        lastFolder = subQueryResponse.getResults().get(0).getAsJsonObject();
                        lastFolderRef = lastFolder.get("_ref").getAsString();
                        logger.info("Subfolder already exists: " + lastFolderRef);
                    } else {
                        // Folder does not exist, create it as a subfolder
                        JsonObject newFolder = new JsonObject();
                        newFolder.addProperty("Name", folderName.trim());
                        newFolder.addProperty("Project", projectRef);
                        newFolder.addProperty("Parent", lastFolderRef);

                        CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                        CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                        if (createFolderResponse.wasSuccessful()) {
                            lastFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                            newFolder.addProperty("_ref", lastFolderRef);
                            lastFolder = newFolder;
                            logger.info("Successfully created subfolder: " + lastFolderRef);
                        } else {
                            logger.error("Error occurred creating subfolder");
                            for (String error : createFolderResponse.getErrors()) {
                                logger.error(error);
                            }
                            break;
                        }
                    }
                }
            }

            return lastFolder;

        } catch (Exception e) {
            logger.error("Exception occurred while creating test folder", e);
            return null;
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    logger.error("Exception occurred while closing RallyRestApi", e);
                }
            }
        }
    }

    /* Method to add attachment to a test step in Rally */
    public static void addAttachmentToTestStep(RallyRestApi restApi, JsonObject testStepJson, String testStepRef, String attachmentLocation, String jiraApiKey) {
        // Upload file as attachment
        File file = new File(attachmentLocation);
        if (!file.exists()) {
            logger.error("File does not exist: " + attachmentLocation);
            return;
        }

        String fileName = file.getName();
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost uploadFile = new HttpPost("https://rally1.rallydev.com/slm/webservice/v2.0/attachment");
            
            // Add authentication header
            uploadFile.setHeader("Authorization", "Bearer " + jiraApiKey);
            
            // Create multipart entity for file upload
            MultipartEntityBuilder builder = MultipartEntityBuilder.create();
            builder.addPart("file", new FileBody(file, ContentType.DEFAULT_BINARY));
            HttpEntity entity = builder.build();
            uploadFile.setEntity(entity);

            try (CloseableHttpResponse response = httpClient.execute(uploadFile)) {
                HttpEntity responseEntity = response.getEntity();
                if (responseEntity != null) {
                    String responseString = EntityUtils.toString(responseEntity);
                    JsonObject jsonResponse = JsonParser.parseString(responseString).getAsJsonObject();
                    
                    if (jsonResponse.has("_ref")) {
                        String attachmentRef = jsonResponse.get("_ref").getAsString();
                        logger.info("Attachment uploaded successfully: " + attachmentRef);

                        // Add reference to the test step
                        JsonArray attachmentsArray = testStepJson.has("attachments") 
                            ? testStepJson.getAsJsonArray("attachments") 
                            : new JsonArray();
                        attachmentsArray.add(attachmentRef);

                        JsonObject updatedTestStep = new JsonObject();
                        updatedTestStep.add("attachments", attachmentsArray);
                        UpdateRequest updateRequest = new UpdateRequest(testStepRef, updatedTestStep);
                        UpdateResponse updateResponse = restApi.update(updateRequest);

                        if (updateResponse.wasSuccessful()) {
                            logger.info("Successfully updated test step with new attachment.");
                        } else {
                            logger.error("Error occurred updating test step with attachment:");
                            for (String error : updateResponse.getErrors()) {
                                logger.error(error);
                            }
                        }
                    } else {
                        logger.error("Error occurred uploading attachment.");
                        logger.error(responseString);
                    }
                }
            }
        } catch (IOException e) {
            logger.error("Exception occurred while adding attachment", e);
        }
    }

    // Implementation to update the TestCase Migrated in Jira to "true". User story US7382197
    public void updateTestCaseMigratedStatusinJira(boolean status) {
        // Method implementation here
    }
}
