import java.io.IOException;
import java.util.ArrayList;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

public class JiraOperation {

    private static final Logger logger = LogManager.getLogger();

    // Assume this method is already implemented to get non-migrated test case keys
    public ArrayList<String> getJiraNonMigratedTestcaseKeys() {
        // Implementation to get test case keys
        return new ArrayList<>();
    }

    // Method to get details of a Jira test case
    public JsonObject getJiraTestCaseDetails(String testCaseKey) {
        JsonObject jiraTestCaseJson = new JsonObject();

        // Dummy data to simulate the response from Jira
        jiraTestCaseJson.addProperty("key", testCaseKey);
        jiraTestCaseJson.addProperty("name", "Sample Test Case");
        jiraTestCaseJson.addProperty("priority", "Normal");
        jiraTestCaseJson.addProperty("status", "Ready");
        jiraTestCaseJson.addProperty("folder", "Sample/Folder/Path");

        // Adding test steps and attachments
        JsonArray testSteps = new JsonArray();
        
        JsonObject step1 = new JsonObject();
        step1.addProperty("description", "Step 1 description");
        step1.addProperty("expectedResult", "Step 1 expected result");
        JsonArray attachments1 = new JsonArray();
        JsonObject attachment1 = new JsonObject();
        attachment1.addProperty("fileName", "attachment1.txt");
        attachment1.addProperty("fileContent", "Base64EncodedContent1");
        attachments1.add(attachment1);
        step1.add("attachments", attachments1);
        testSteps.add(step1);

        JsonObject step2 = new JsonObject();
        step2.addProperty("description", "Step 2 description");
        step2.addProperty("expectedResult", "Step 2 expected result");
        JsonArray attachments2 = new JsonArray();
        JsonObject attachment2 = new JsonObject();
        attachment2.addProperty("fileName", "attachment2.txt");
        attachment2.addProperty("fileContent", "Base64EncodedContent2");
        attachments2.add(attachment2);
        step2.add("attachments", attachments2);
        testSteps.add(step2);

        jiraTestCaseJson.add("testSteps", testSteps);

        return jiraTestCaseJson;
    }
}


public class RallyOperation {

    private String rallyBaseURL;
    private String rallyApiKey;
    private String rallyProjectKey;
    private String rallyUser;

    private static final Logger logger = LogManager.getLogger();

    public RallyOperation() {
        rallyBaseURL = ConfigLoader.getConfigValue("RALLY_BASE_URL");
        rallyApiKey = ConfigLoader.getConfigValue("RALLY_API_KEY");
        rallyProjectKey = ConfigLoader.getConfigValue("RALLY_PROJECT_REF");
        rallyUser = ConfigLoader.getConfigValue("RALLY_USER_REF");
        logger.info("Rally values for the project key " + rallyProjectKey + " are assigned from rally_migration_config.properties file");
        logger.log(Level.getLevel("VERBOSE"), "Below the values assigned from rally_migration_config.properties file. \nRally Base URL - " + rallyBaseURL + "\nRally Project Reference " + rallyProjectKey);
    }

    public boolean createRallyTestcase(JsonObject jiraJson) {
        boolean status = false;
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", rallyProjectKey);

        JsonObject testCase = new JsonObject();

        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name - No TestCase name found in Jira");
        }

        testCase.addProperty("Method", "Manual");

        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority");
        }

        testCase.addProperty("Owner", "/user/" + rallyUser);

        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false);
        }

        // Add Tags
        JsonArray tagsArray = new JsonArray();
        JsonElement tagsElement = jiraJson.get("labels");
        if (tagsElement != null && tagsElement.isJsonArray()) {
            for (JsonElement tagElement : tagsElement.getAsJsonArray()) {
                JsonObject tagObject = Utils.findOrCreateTag(new RallyRestApi(new URI(rallyBaseURL), rallyApiKey), tagElement.getAsString());
                if (tagObject != null) {
                    tagsArray.add(tagObject);
                }
            }
        }
        testCase.add("Tags", tagsArray);

        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");

        JsonObject testFolder = Utils.createTestFolder(folderHierarchy, rallyProjectKey, rallyBaseURL, rallyApiKey);
        if (testFolder == null) {
            logger.error("Failed to create or retrieve TestFolder during Testcase Creation process in Rally");
            return status;
        } else {
            logger.info("Folder " + folderPath + " is created successfully in Rally");
        }

        rallyJson.add("TestFolder", testFolder);
        rallyJson.add("testCase", testCase);

        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
        } catch (URISyntaxException e) {
            logger.error("URI Syntax error for the URL " + rallyBaseURL + ". Please check the URL.", e);
        }
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", rallyProjectKey);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                status = true;
                logger.info("Successfully created test case and the OID for created testcase: " + createResponse.getObject().get("_ref").getAsString());

                // Adding test steps
                JsonArray testSteps = jiraJson.getAsJsonArray("testSteps");
                for (JsonElement stepElement : testSteps) {
                    JsonObject stepObject = stepElement.getAsJsonObject();
                    String stepDescription = stepObject.get("description").getAsString();
                    String stepExpectedResult = stepObject.get("expectedResult").getAsString();
                    JsonArray stepAttachments = stepObject.getAsJsonArray("attachments");

                    JsonObject newTestStep = new JsonObject();
                    newTestStep.addProperty("TestCase", createResponse.getObject().get("_ref").getAsString());
                    newTestStep.addProperty("Input", stepDescription);
                    newTestStep.addProperty("ExpectedResult", stepExpectedResult);

                    CreateRequest stepCreateRequest = new CreateRequest("testcasestep", newTestStep);
                    CreateResponse stepCreateResponse = restApi.create(stepCreateRequest);

                    if (stepCreateResponse.wasSuccessful()) {
                        logger.info("Successfully created test step");

                        // Adding attachments to the step
                        for (JsonElement attachmentElement : stepAttachments) {
                            JsonObject attachmentObject = attachmentElement.getAsJsonObject();
                            String fileName = attachmentObject.get("fileName").getAsString();
                            String fileContent = attachmentObject.get("fileContent").getAsString();

                            Utils.addAttachmentToTestStep(restApi, stepCreateResponse.getObject().get("_ref").getAsString(), fileName, fileContent);
                        }

                    } else {
                        logger.error("Error occurred creating test step");
                        for (String error : stepCreateResponse.getErrors()) {
                            logger.error(error);
                        }
                    }
                }

            } else {
                logger.error("Error occurred creating test case");
                for (String error : createResponse.getErrors()) {
                    logger.error(error);
                }
            }

        } finally {
            try {
                restApi.close();
                logger.info("Closed rest api resource in finally block");
            } catch (IOException e) {
                logger.error("Error occurred while closing rest api resource at finally block", e);
            }
        }
        return status;
    }
}
