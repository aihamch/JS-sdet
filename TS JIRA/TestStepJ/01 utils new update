public class Utils {

    // Method to get JIRA response from the given URL with authentication token
    public static HttpEntity getJiraResponse(String url, String jiraApiKey) {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpGet httpGet = new HttpGet(url);
        httpGet.setHeader("Authorization", "Bearer " + jiraApiKey);
        httpGet.setHeader("Accept", "application/json");

        try (CloseableHttpResponse response = httpClient.execute(httpGet)) {
            if (response.getStatusLine().getStatusCode() == 200) {
                return response.getEntity();
            } else {
                System.err.println("Error fetching JIRA response: " + response.getStatusLine());
                return null;
            }
        } catch (IOException e) {
            System.err.println("IOException during JIRA response fetch");
            e.printStackTrace();
            return null;
        }
    }

    // Method to create a test folder in Rally
    public static JsonObject createTestFolder(String[] folderHierarchy, String rallyProjectKey, String rallyBaseURL, String rallyApiKey) {
        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI(rallyBaseURL), rallyApiKey);
            restApi.setApplicationName("CreateTestFolderApp");
            JsonObject folderRef = null;

            // Iterate through folder hierarchy and create folders if they do not exist
            for (String folderName : folderHierarchy) {
                JsonObject folderRequest = new JsonObject();
                folderRequest.addProperty("Name", folderName);
                folderRequest.addProperty("Project", rallyProjectKey);

                CreateRequest createRequest = new CreateRequest("TestFolder", folderRequest);
                CreateResponse createResponse = restApi.create(createRequest);

                if (createResponse.wasSuccessful()) {
                    folderRef = createResponse.getObject();
                } else {
                    System.err.println("Error creating TestFolder: " + folderName);
                }
            }
            return folderRef;
        } catch (URISyntaxException e) {
            System.err.println("URISyntaxException while creating test folder");
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (restApi != null) {
                    restApi.close();
                }
            } catch (IOException e) {
                System.err.println("IOException while closing RallyRestApi");
                e.printStackTrace();
            }
        }
    }

    // Method to add attachment to a test step in Rally
    public static void addAttachmentToTestStep(RallyRestApi restApi, JsonObject testStepJson, String testStepRef, String attachmentLocation) {
        // Get attachments from the test step JSON
        JsonArray attachmentsArray = testStepJson.getAsJsonArray("attachments");
        if (attachmentsArray != null) {
            for (JsonElement attachmentElement : attachmentsArray) {
                JsonObject attachmentObject = attachmentElement.getAsJsonObject();
                String fileName = attachmentObject.get("filename").getAsString();
                String fileUrl = attachmentObject.get("content").getAsString();

                // Download the attachment
                File attachmentFile = new File(attachmentLocation + "/" + fileName);
                try (InputStream inputStream = getJiraResponse(fileUrl, jiraApiKey).getContent();
                     FileOutputStream outputStream = new FileOutputStream(attachmentFile)) {

                    byte[] buffer = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = inputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    System.out.println("Downloaded attachment: " + fileName);
                    
                    // Upload the attachment to Rally
                    byte[] fileContent = Files.readAllBytes(Paths.get(attachmentFile.getAbsolutePath()));
                    CreateRequest createRequest = new CreateRequest("Attachment", new JsonObject());
                    createRequest.setData(fileContent);
                    createRequest.setContentType("application/octet-stream");
                    createRequest.setFileName(fileName);

                    CreateResponse createResponse = restApi.create(createRequest);
                    if (createResponse.wasSuccessful()) {
                        JsonObject uploadedAttachment = createResponse.getObject();
                        String attachmentRef = uploadedAttachment.get("_ref").getAsString();
                        
                        // Add the uploaded attachment to the test step in Rally
                        JsonObject testStepUpdate = new JsonObject();
                        testStepUpdate.addProperty("_ref", testStepRef);
                        JsonArray newAttachmentsArray = new JsonArray();
                        newAttachmentsArray.add(attachmentRef);
                        testStepUpdate.add("Attachments", newAttachmentsArray);
                        
                        CreateRequest updateRequest = new CreateRequest("TestStep", testStepUpdate);
                        CreateResponse updateResponse = restApi.update(updateRequest);
                        if (updateResponse.wasSuccessful()) {
                            System.out.println("Attached file to test step: " + fileName);
                        } else {
                            System.err.println("Failed to attach file to test step: " + fileName);
                        }
                    } else {
                        System.err.println("Failed to upload file: " + fileName);
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
