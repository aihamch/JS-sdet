import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.response.CreateResponse;

import java.net.URI;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class fodlercorrection {

    public static void main(String[] args) throws Exception {
        String testCaseId = "CC2-T44983";
        String jiraBaseUri = "https://jira.healthcareit.net/";
        String authToken = "NjYwNzM3MzEyMzczOqpitrVg77VQlPFPBwSZ+cMq37S5";
        String projectRef = "789325818991";

        // Send the GET request to JIRA using HttpClient
        HttpClient client = HttpClients.createDefault();
        HttpGet request = new HttpGet(jiraBaseUri + "/rest/atm/1.0/testcase/" + testCaseId);
        request.setHeader("Authorization", "Bearer " + authToken);
        request.setHeader("Accept", "application/json");

        HttpResponse response = client.execute(request);
        String responseBody = EntityUtils.toString(response.getEntity());

        System.out.println("Pretty Response: " + responseBody);

        // Parse the JIRA response
        JsonObject jiraJson = JsonParser.parseString(responseBody).getAsJsonObject();

        // Create the Rally JSON object
        JsonObject rallyJson = new JsonObject();
        rallyJson.addProperty("projectRef", projectRef);

        // Create a new test case
        JsonObject testCase = new JsonObject();

        // Add name
        JsonElement nameElement = jiraJson.get("name");
        if (nameElement != null && !nameElement.isJsonNull()) {
            testCase.addProperty("Name", nameElement.getAsString());
        } else {
            testCase.addProperty("Name", "Default Test Case Name"); // default value
        }

        // Add method
        testCase.addProperty("Method", "Manual"); // Assuming a default value

        // Add priority
        JsonElement priorityElement = jiraJson.get("priority");
        if (priorityElement != null && !priorityElement.isJsonNull()) {
            String priority = priorityElement.getAsString();
            if (priority.equalsIgnoreCase("Normal")) {
                testCase.addProperty("Priority", "Useful");
            } else {
                testCase.addProperty("Priority", priority);
            }
        } else {
            testCase.addProperty("Priority", "Default Priority"); // default value
        }

        // Add owner
        testCase.addProperty("Owner", "/user/775698509283"); // Assuming a default value

        // Add status
        JsonElement statusElement = jiraJson.get("status");
        if (statusElement != null && !statusElement.isJsonNull()) {
            testCase.addProperty("Ready", statusElement.getAsString().equals("Ready"));
        } else {
            testCase.addProperty("Ready", false); // default value
        }

        // Add Tags
        JsonArray tagsArray = new JsonArray();
        JsonObject tagObject = new JsonObject();
        tagObject.addProperty("_ref", "/tag/56011614555");
        tagObject.addProperty("Name", "Billing and Eligibility");
        tagsArray.add(tagObject);
        testCase.add("Tags", tagsArray);

        // Get folder hierarchy from JIRA response
        String folderPath = jiraJson.get("folder").getAsString();
        String[] folderHierarchy = folderPath.split("/");

        // Create TestFolder based on folder hierarchy
        JsonObject testFolder = createTestFolder(folderHierarchy, projectRef);

        // Add TestFolder to the test case
        rallyJson.add("TestFolder", testFolder);

        // Add the testCase object to the rallyJson
        rallyJson.add("testCase", testCase);

        // Save the transformed JSON to a variable
        String rallyJsonString = new GsonBuilder().setPrettyPrinting().create().toJson(rallyJson);

        // Print the transformed JSON string
        System.out.println("Transformed JSON: " + rallyJsonString);

        // Initialize Rally API
        RallyRestApi restApi = new RallyRestApi(new URI("https://rally1.rallydev.com"), "_UWk01XQOyRPk2ctMLiR9PAM1nBE6spnDEmSj1pk");
        restApi.setApplicationName("CreateTestCaseApp");

        JsonObject jsonData = JsonParser.parseString(rallyJsonString).getAsJsonObject();

        // Extract values from JSON:
        JsonObject testCaseData = jsonData.getAsJsonObject("testCase");
        JsonObject testFolderData = jsonData.getAsJsonObject("TestFolder");

        try {
            // Create a new test case
            JsonObject newTestCase = new JsonObject();
            newTestCase.addProperty("Name", testCaseData.get("Name").getAsString());
            newTestCase.addProperty("Project", projectRef);
            newTestCase.addProperty("Method", testCaseData.get("Method").getAsString());
            newTestCase.addProperty("Priority", testCaseData.get("Priority").getAsString());
            newTestCase.addProperty("Owner", testCaseData.get("Owner").getAsString());
            newTestCase.addProperty("Ready", testCaseData.get("Ready").getAsBoolean());

            // Add Tags to the test case from the JSON file
            JsonArray tagsArrayFromJson = testCaseData.getAsJsonArray("Tags");
            if (tagsArrayFromJson != null) {
                JsonArray newTagsArray = new JsonArray();
                for (JsonElement tagElement : tagsArrayFromJson) {
                    JsonObject tagObjectFromJson = tagElement.getAsJsonObject();
                    String tagRef = tagObjectFromJson.get("_ref").getAsString();
                    JsonObject newTagObject = new JsonObject();
                    newTagObject.addProperty("_ref", tagRef);
                    newTagsArray.add(newTagObject);
                }
                newTestCase.add("Tags", newTagsArray);
            }

            // Add TestFolder to the test case from the JSON file
            String testFolderRef = testFolderData.get("_ref").getAsString();
            newTestCase.addProperty("TestFolder", testFolderRef);

            CreateRequest createRequest = new CreateRequest("testcase", newTestCase);
            CreateResponse createResponse = restApi.create(createRequest);

            if (createResponse.wasSuccessful()) {
                System.out.println("Successfully created test case: " + createResponse.getObject().get("_ref").getAsString());
            } else {
                System.out.println("Error occurred creating test case:");
                for (String error : createResponse.getErrors()) {
                    System.out.println(error);
                }
            }
        } finally {
            // Release resources
            restApi.close();
        }
    }

    private static JsonObject createTestFolder(String[] folderHierarchy, String projectRef) {
        JsonObject parentFolder = null;
        String parentFolderRef = null;

        RallyRestApi restApi = null;
        try {
            restApi = new RallyRestApi(new URI("https://rally1.rallydev.com"), "_UWk01XQOyRPk2ctMLiR9PAM1nBE6spnDEmSj1pk");
            restApi.setApplicationName("CreateTestCaseApp");

            for (String folderName : folderHierarchy) {
                // Validate folder name
                if (folderName == null || folderName.trim().isEmpty()) {
                    System.out.println("Invalid folder name encountered: '" + folderName + "'");
                    continue; // Skip invalid folder names
                }

                JsonObject newFolder = new JsonObject();
                newFolder.addProperty("Name", folderName.trim());
                newFolder.addProperty("Project", projectRef);

                if (parentFolderRef != null) {
                    newFolder.addProperty("Parent", parentFolderRef);
                }

                CreateRequest createFolderRequest = new CreateRequest("testfolder", newFolder);
                CreateResponse createFolderResponse = restApi.create(createFolderRequest);

                if (createFolderResponse.wasSuccessful()) {
                    parentFolderRef = createFolderResponse.getObject().get("_ref").getAsString();
                    newFolder.addProperty("_ref", parentFolderRef);
                    parentFolder = newFolder;
                    System.out.println("Successfully created folder: " + parentFolderRef);
                } else {
                    System.out.println("Error occurred creating folder:");
                    for (String error : createFolderResponse.getErrors()) {
                        System.out.println(error);
                    }
                    break;
                }
            }

            return parentFolder;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (restApi != null) {
                try {
                    restApi.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }
}
